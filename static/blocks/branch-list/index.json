{"html":"<h2>How to use this block</h2><p>This is a block for <b style=\"color:red\">multi-storyline interactive</b>. Once you use this block, your page will be segmented into several numbered blocks, and these blocks will be default hidden in the viewer mode.</p><p>We expect your users to interact with your content by clicking these buttons below; you can config them with the <b style=\"color:red\">block number</b> they are going to reveal after clicking.</p><p>To see the effect, <b style=\"color:red\">simply drag another block under this block</b>; a label with number will appear in the left below this block.</p><br/><br/><div repeat-host=\"repeat-host\" class=\"text-left\"><ul class=\"big\"><li repeat-item=\"repeat-item\" edit-text=\"branch-target\" edit-text-placeholder=\"enter segment number to reveal\" class=\"clickable\">Choice 1</li><li repeat-item=\"repeat-item\" edit-text=\"branch-target\" edit-text-placeholder=\"enter segment number to reveal\" class=\"clickable\">Choice 2</li><li repeat-item=\"repeat-item\" edit-text=\"branch-target\" edit-text-placeholder=\"enter segment number to reveal\" class=\"clickable\">Choice 3</li></ul></div>","css":".page-viewer *[branch-id] {\n  display: none;\n}\n.block-branch-list {\n  position: relative;\n}\n.block-branch-list .hint {\n  position: absolute;\n  z-index: 1;\n  bottom: -40px;\n  left: 0;\n  padding: 5px 10px;\n  background: #e91e63;\n  font-size: 1.5em;\n  font-weight: 900;\n  color: #fff;\n  font-family: courier new;\n  line-height: 1.3em;\n}\n.block-branch-list ul {\n  list-style: none;\n}\n.block-branch-list ul li:before {\n  font-family: FontAwesome;\n  font-size: 0.8em;\n  margin-right: 5px;\n  width: 1em;\n  display: inline-block;\n  content: \"\\f096\";\n}\n.block-branch-list ul li:hover:before,\n.block-branch-list ul li.active:before {\n  content: \"\\f046\";\n}\n.block-branch-list:last-child .hint {\n  display: none;\n}\n.block-branch-no1,\n.block-branch-no2,\n.block-branch-no3,\n.block-branch-no4 {\n  border-left: 4px solid #e91e63;\n}\n.block-branch-no2 {\n  border-left-color: #673ab7;\n}\n.block-branch-no3 {\n  border-left-color: #2196f3;\n}\n.block-branch-no4 {\n  border-left-color: #4caf50;\n}\n.block-branch-no2.hint {\n  border-left: none;\n  background: #673ab7;\n}\n.block-branch-no3.hint {\n  border-left: none;\n  background: #2196f3;\n}\n.block-branch-no4.hint {\n  border-left: none;\n  background: #4caf50;\n}\n@media (max-width: 768px) {\n  .block-branch-list .btn {\n    display: block;\n  }\n  .block-branch-list ul ul {\n    padding-left: 0;\n  }\n}\n","js":"// Generated by LiveScript 1.3.0\nmodule.exports = {\n  custom: {\n    attrs: ['branch-id', 'branch-target']\n  },\n  isBranchBlock: function(classList){\n    return ['block-branch', 'block-branch-list'].filter(function(it){\n      return classList.contains(it);\n    }).length;\n  },\n  init: function(){\n    var changeHandler, hint, this$ = this;\n    changeHandler = function(){\n      var blocks, ref$, last, idx, update, i$, to$, i;\n      blocks = btools.qsAll('.block-item');\n      ref$ = [-1, -1], last = ref$[0], idx = ref$[1];\n      if (this$.viewMode && this$.inited) {\n        return;\n      }\n      if (this$.viewMode) {\n        this$.inited = true;\n      }\n      update = function(start, end, idx){\n        var i$, i, results$ = [];\n        for (i$ = start; i$ <= end; ++i$) {\n          i = i$;\n          if (!this$.viewMode) {\n            blocks[i].classList.add(\"block-branch-no\" + (1 + idx % 3), 'block-branch-no');\n          }\n          results$.push(blocks[i].setAttribute('branch-id', idx + 1));\n        }\n        return results$;\n      };\n      for (i$ = 0, to$ = blocks.length; i$ < to$; ++i$) {\n        i = i$;\n        blocks[i].classList.remove('block-branch-no1', 'block-branch-no2', 'block-branch-no3');\n        if (this$.isBranchBlock(blocks[i].classList)) {\n          if (last >= 0) {\n            update(last, i, idx);\n          }\n          ref$ = [i + 1, idx + 1], last = ref$[0], idx = ref$[1];\n          btools.qs('.hint', blocks[i]).map(fn$);\n        }\n      }\n      if (last >= 0) {\n        return update(last, blocks.length - 1, idx);\n      }\n      function fn$(hint){\n        hint.classList.remove('block-branch-no1', 'block-branch-no2', 'block-branch-no3');\n        hint.classList.add(\"block-branch-no\" + (1 + idx % 3));\n        return hint.innerText = idx + 1;\n      }\n    };\n    this.page.addEventListener('block.change', function(){\n      return changeHandler();\n    });\n    if (!this.viewMode) {\n      hint = this.block.querySelector('.hint');\n      if (hint) {\n        return;\n      }\n      hint = document.createElement(\"div\");\n      hint.classList.add('hint');\n      this.block.appendChild(hint);\n      if (!this.branching) {\n        changeHandler();\n      }\n      return;\n    }\n    return this.block.addEventListener('click', function(e){\n      var target, branchId, i$, ref$, len$, item, first, last, cnode, next;\n      target = btools.traceUp('[branch-target]', e.target);\n      branchId = (target && target.getAttribute && target.getAttribute('branch-target')) || null;\n      if (!branchId) {\n        return;\n      }\n      for (i$ = 0, len$ = (ref$ = target.parentNode.childNodes).length; i$ < len$; ++i$) {\n        item = ref$[i$];\n        if (item.getAttribute && item.getAttribute('branch-target')) {\n          item.classList.remove('active');\n        }\n      }\n      target.classList.add('active');\n      target = e.target;\n      while (target && target.classList) {\n        if (this$.isBranchBlock(target.classList)) {\n          break;\n        }\n        target = target.parentNode;\n      }\n      if (!target.classList) {\n        return;\n      }\n      ref$ = [null, target], first = ref$[0], last = ref$[1];\n      cnode = this$.block.nextSibling;\n      while (cnode) {\n        next = cnode.nextSibling;\n        if (cnode.sourceBranch) {\n          cnode.parentNode.removeChild(cnode);\n        }\n        cnode = next;\n      }\n      btools.qsAll(\"[branch-id]\").map(function(it){\n        var parent, newnode;\n        if (it.getAttribute('branch-id') !== branchId) {\n          return;\n        }\n        parent = it.parentNode;\n        newnode = it.cloneNode(true);\n        newnode.removeAttribute('branch-id');\n        newnode.sourceBranch = this$.block;\n        parent.insertBefore(newnode, last.nextSibling);\n        blocksManager.init(newnode, {\n          branching: this$.isBranchBlock(newnode.classList)\n        });\n        last = newnode;\n        if (!first) {\n          first = newnode;\n        }\n        return newnode.style.display = 'block';\n      });\n      return setTimeout(function(){\n        var box, src, des, count, delta, handler;\n        box = first.getBoundingClientRect();\n        src = document.scrollingElement.scrollTop;\n        des = box.y + src - 20;\n        count = 0;\n        delta = 0.001;\n        return handler = setInterval(function(){\n          var value;\n          value = src + (des - src) * delta * count * count;\n          window.scrollTo(0, value);\n          count = count + 1;\n          if (value >= des) {\n            return clearInterval(handler);\n          }\n        }, 10);\n      }, 250);\n    });\n  },\n  destroy: function(){\n    if (btools.qsAll('.block-branch,.block-branch-list').length <= 1) {\n      return btools.qsAll('.block-branch-no').map(function(it){\n        return it.classList.remove('block-branch-no', 'block-branch-no1', 'block-branch-no2', 'block-branch-no3');\n      });\n    }\n  }\n};"}