// Generated by LiveScript 1.3.0
blocksManager.code.add('blank', function(module){
  return module.exports = {
    wrap: function(){
      return console.log('initialize blank block');
    }
  };
});
blocksManager.code.add('dual-timeline', function(module){
  return module.exports = {
    wrap: function(){
      return console.log('initialize blank block');
    }
  };
});
blocksManager.code.add('gallery', function(module){
  return module.exports = {
    config: {
      editable: false
    }
  };
});
blocksManager.code.add('hr', function(module){
  return module.exports = {
    config: {
      editable: false
    }
  };
});
blocksManager.code.add('image-compare', function(module){
  return module.exports = {
    config: {
      editable: false
    },
    wrap: function(node){
      var ctrl, thumbs, container, dragging, box;
      ctrl = node.querySelector('.ctrl');
      thumbs = node.querySelectorAll('.thumb');
      container = node.querySelector('.container');
      dragging = false;
      node.addEventListener('mousedown', function(e){
        return dragging = true;
      });
      node.addEventListener('mousemove', function(e){
        var box, x;
        if (!dragging) {
          return;
        }
        box = container.getBoundingClientRect();
        x = e.clientX - box.x;
        ctrl.style.left = (e.clientX - box.x) + "px";
        thumbs[0].style.width = x + "px";
        return thumbs[1].style.width = (box.width - x) + "px";
      });
      node.addEventListener('mouseup', function(e){
        return dragging = false;
      });
      box = container.getBoundingClientRect();
      return Array.from(thumbs).map(function(it){
        return it.style.backgroundSize = box.width + "px";
      });
    }
  };
});
blocksManager.code.add('map', function(module){
  return module.exports = {
    handle: {
      text: function(node, text){
        var coder, this$ = this;
        coder = new google.maps.Geocoder();
        return coder.geocode({
          address: text
        }, function(res, status){
          if (status !== google.maps.GeocoderStatus.OK || !res[0]) {
            return;
          }
          node.map.setCenter(res[0].geometry.location);
          return node.map.setZoom(14);
        });
      }
    },
    config: {
      editable: false
    },
    wrap: function(node, collab){
      var container, handler, this$ = this;
      container = node.querySelector('.container');
      if (!window.initMap) {
        window.initMap = function(){
          var i$, ref$, ref1$, len$, func;
          for (i$ = 0, len$ = (ref$ = (ref1$ = window.initMap).list || (ref1$.list = [])).length; i$ < len$; ++i$) {
            func = ref$[i$];
            func();
          }
          return window.initMap.inited = true;
        };
      }
      if (!window.initMap.list) {
        window.initMap.list = [];
      }
      handler = function(){
        var options, map;
        options = {
          center: {
            lat: +(container.getAttribute('lat') || -34.397),
            lng: +(container.getAttribute('lng') || 150.644)
          },
          zoom: +(container.getAttribute('zoom') || 8)
        };
        map = container.map = new google.maps.Map(container, options);
        google.maps.event.addListener(map, 'idle', function(){
          var center;
          center = map.getCenter();
          container.setAttribute('lat', center.lat());
          container.setAttribute('lng', center.lng());
          container.setAttribute('zoom', map.getZoom());
          if (collab) {
            return collab.action.editBlock(node);
          }
        });
        return google.maps.event.addDomListener(container, 'mouseover', function(e){
          var evt;
          if (e._generated) {
            return;
          }
          evt = document.createEvent('MouseEvents');
          evt.initMouseEvent('mouseover', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
          evt._generated = 1;
          return container.dispatchEvent(evt);
        });
      };
      if (!window.initMap.inited) {
        return window.initMap.list.push(handler);
      } else {
        return handler();
      }
    },
    library: {
      gmaps: 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCtTg4onCcl1CJpO_ly3VEYLrUxnXQY00E&callback=initMap'
    }
  };
});
blocksManager.code.add('questionnaire', function(module){
  return module.exports = {
    wrap: function(node){
      var scoring;
      scoring = function(){
        var result;
        result = Array.from(node.querySelectorAll('.choice.active')).map(function(it){
          return +(it.getAttribute('score') || 0);
        }).reduce(function(a, b){
          return a + b;
        }, 0);
        return node.querySelector('.score').innerText = result;
      };
      return node.addEventListener('click', function(e){
        var target;
        target = e.target;
        if (!target.classList.contains('choice')) {
          return;
        }
        Array.from(target.parentNode.childNodes).map(function(it){
          if (it !== target && it.classList.contains('choice')) {
            return it.classList.remove('active');
          }
        });
        target.classList.toggle('active');
        return scoring();
      });
    }
  };
});
blocksManager.code.add('timeline', function(module){
  return module.exports = {
    wrap: function(){
      return console.log('initialize blank block');
    }
  };
});
blocksManager.code.add('video', function(module){
  return module.exports = {
    handle: {
      text: function(node, text){}
    },
    transform: {
      text: function(text){
        var ret;
        if (/youtube\./.exec(text)) {
          ret = /v=(.+)[&#]?/.exec(text);
          return ret ? "https://www.youtube.com/embed/" + ret[1] : text;
        } else if (/vimeo\./.exec(text)) {
          if (/channels/.exec(text)) {
            ret = /vimeo\.com\/channels\/staffpicks\/([^?&#]+)/.exec(text);
          } else {
            ret = /vimeo\.com\/([^?&#]+)/.exec(text);
          }
          return ret ? "https://player.vimeo.com/video/" + ret[1] : text;
        } else {
          return "about:blank";
        }
        if (!/^https?:\/\//.exec(text)) {
          return "about:blank";
        }
      }
    },
    config: {
      editable: false
    }
  };
});