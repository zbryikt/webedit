// Generated by LiveScript 1.3.0
var x$;
x$ = angular.module('webedit');
x$.controller('profile', ['$scope', '$http', '$timeout', 'ldNotify'].concat(function($scope, $http, $timeout, ldNotify){
  if (!($scope.user.data && $scope.user.data.key)) {
    $scope.loading = true;
    return window.location.href = "/auth/?nexturl=/me/";
  }
  $scope.settings = {
    modal: {}
  };
  $scope.dnshint = {
    modal: {}
  };
  $scope.displayname = {
    value: $scope.user.data.displayname,
    update: function(){
      var this$ = this;
      if (!this.value || !$scope.user.data.key) {
        return;
      }
      $scope.loading = true;
      return $http({
        url: "/d/user/" + $scope.user.data.key,
        method: 'PUT',
        data: {
          displayname: this.value
        }
      })['finally'](function(){
        return $scope.loading = false;
      }).then(function(){
        $scope.user.data.displayname = this$.value;
        return ldNotify.success('display name updated');
      })['catch'](function(){
        return ldNotify.danger('failed to update. try later?');
      });
    }
  };
  $scope.avatar = {
    value: "/s/avatar/" + $scope.user.data.key + ".png",
    sync: '',
    read: function(data, file){
      var raw, fd, this$ = this;
      if (!file || !/image\//.exec(file.type + "")) {
        return ldNotify.danger("this is not an image");
      }
      if (data.length > 1048576) {
        return ldNotify.danger("image too large and should be smaller than 1MB");
      }
      $scope.loading = true;
      raw = new Uint8Array(data);
      fd = new FormData();
      fd.append('image', new Blob([raw], {
        type: "application/octet-stream"
      }));
      return $http({
        url: '/me/avatar',
        method: 'PUT',
        data: fd,
        transformRequest: angular.identity,
        headers: {
          "Content-Type": undefined
        }
      })['finally'](function(){
        return $scope.loading = false;
      }).then(function(d){
        ldNotify.success("avatar updated");
        return $scope.avatar.value = "/s/avatar/" + $scope.user.data.key + ".png?" + Math.random().toString(16).substring(2);
      })['catch'](function(d){
        return ldNotify.danger("failed to update avatar. try later?");
      });
    }
  };
  $scope.passwd = {
    n: '',
    o: '',
    error: {},
    update: function(){
      var this$ = this;
      this.error = {};
      $scope.loading = true;
      return $http({
        url: '/d/me/passwd',
        method: 'PUT',
        data: {
          n: this.n,
          o: this.o
        }
      })['finally'](function(){
        return $timeout(function(){
          return $scope.loading = false;
        }, 1000);
      }).then(function(){
        return ldNotify.success("password changed.");
      })['catch'](function(d){
        var code;
        code = errcode.subcode((d.data || (d.data = {})).code, "profile");
        if (code[0]) {
          return this$.error[code[0]] = true;
        } else {
          return ldNotify.danger("failed changing password. try later?");
        }
      });
    }
  };
  $scope.docs = {
    loading: true,
    list: [],
    cur: [],
    idx: 0,
    pageAt: function(idx){
      if (!this.list[idx]) {
        idx--;
      }
      return this.cur = this.list[idx], this.idx = idx, this;
    },
    toggle: function(doc, value){
      if (value == null) {
        value = !doc.toggled;
      }
      if (doc !== this.toggledDoc && this.toggledDoc && value) {
        this.toggledDoc.toggled = false;
      }
      doc.toggled = value;
      if (doc !== this.toggledDoc) {
        return this.toggledDoc = doc;
      } else {
        return this.toggledDoc = null;
      }
    },
    fetch: function(){
      var this$ = this;
      return $http({
        url: '/d/me/doc/',
        method: 'GET'
      })['finally'](function(){
        return this$.loading = false;
      }).then(function(ret){
        ret.data.map(function(it){
          var i$, to$, i;
          it.timestamp = new Date(it.modifiedtime || it.createdtime).getTime();
          if (it.thumbnail) {
            it.thumbnail = it.thumbnail.replace(/\/\d+x\d+\//, '/80x42/');
          }
          it.permlist = [];
          for (i$ = 0, to$ = (it.perm || []).length; i$ < to$; ++i$) {
            i = i$;
            it.permlist.push({
              displayname: it.perm_name[i],
              username: it.perm_email[i],
              perm: it.perm[i],
              key: it.perm_key[i]
            });
          }
          return it.permlist.sort(function(a, b){
            return b.perm - a.perm;
          });
        });
        this$.raw = ret.data;
        return this$.prepare();
      });
    },
    'delete': function(doc){
      var idx;
      idx = this.raw.indexOf(doc);
      if (!~idx) {
        return;
      }
      this.raw.splice(idx, 1);
      return this.prepare();
    },
    prepare: function(){
      var i$, to$, i, j$, j;
      this.raw.sort(function(a, b){
        return b.timestamp - a.timestamp;
      });
      this.list = [];
      for (i$ = 0, to$ = Math.floor(this.raw.length / 20); i$ <= to$; ++i$) {
        i = i$;
        this.list.push([]);
        for (j$ = 0; j$ < 20; ++j$) {
          j = j$;
          if (i * 20 + j >= this.raw.length) {
            break;
          }
          this.list[i].push(this.raw[i * 20 + j]);
        }
      }
      return this.cur = this.list[this.idx];
    }
  };
  $scope.docs.fetch();
  return $scope.page = {
    perms: {
      perm: 10,
      value: '',
      isAdmin: function(doc, key){
        if (!doc || !key) {
          return false;
        }
        if (doc.owner === key) {
          return true;
        }
        if (doc.permlist.filter(function(it){
          return it.key === key && it.perm >= 40;
        }).length) {
          return true;
        }
        return false;
      },
      permName: function(perm){
        if (perm >= 40) {
          return 'Admin';
        } else if (perm >= 30) {
          return 'Edit';
        } else {
          return 'View';
        }
      },
      remove: function(doc, key){
        if (!key || !doc || !(doc.plan && doc.plan.name === 'pro')) {
          return;
        }
        if (!doc.permlist.filter(function(it){
          return it.key === key;
        }).length) {
          return;
        }
        $scope.loading = true;
        return $http({
          url: "/d/page/" + doc.slug + "/perm/" + key,
          method: 'DELETE'
        })['finally'](function(){
          return $scope.loading = false;
        }).then(function(){
          doc.permlist = doc.permlist.filter(function(it){
            return it.key !== key;
          });
          return ldNotify.send('success', 'deleted');
        })['catch'](function(){
          return ldNotify.send('danger', 'failed. try again later?');
        });
      },
      add: function(doc){
        var this$ = this;
        if (!this.value || !doc || !(doc.plan && doc.plan.name === 'pro')) {
          return;
        }
        $scope.loading = true;
        return $http({
          url: "/d/page/" + doc.slug + "/perm",
          method: 'PUT',
          data: {
            emails: this.value,
            perm: this.perm
          }
        })['finally'](function(){
          return $scope.loading = false;
        }).then(function(ret){
          var added, list;
          added = (ret.data || []).map(function(it){
            return it.username.trim();
          });
          ret.data.map(function(it){
            return it.perm = this$.perm;
          });
          list = (this$.value || "").split(',').map(function(it){
            return it.trim();
          }).filter(function(it){
            return it;
          }).filter(function(it){
            return !in$(it, added);
          });
          if (list.length) {
            this$.value = list.join(',');
            ldNotify.send('warning', 'some emails are not added.');
          } else {
            ldNotify.send('success', 'added.');
          }
          return doc.permlist = (doc.permlist || []).concat(ret.data);
        })['catch'](function(){
          return ldNotify.send('danger', 'failed. try again later?');
        });
      }
    },
    toggle: function(e, doc){
      if (e.target && e.target.getAttribute && /^item|ctrl|list/.exec(e.target.getAttribute("class"))) {
        return $scope.docs.toggle(doc);
      }
    },
    'delete': function(doc){
      $scope.loading = true;
      return $http({
        url: "/d/page/" + doc.slug + "/",
        method: 'DELETE'
      })['finally'](function(){
        return $scope.loading = false;
      }).then(function(){
        $scope.docs['delete'](doc);
        return ldNotify.send('success', 'Deleted');
      })['catch'](function(){
        return ldNotify.send('danger', 'failed. try again later?');
      });
    },
    thumbnail: function(doc){
      var shrink, dialog;
      shrink = "1024x1024";
      dialog = uploadcare.openDialog(null, null, {
        imageShrink: shrink,
        crop: 'free'
      });
      return dialog.done(function(it){
        var file, that;
        file = ((that = it.files)
          ? that()
          : [it])[0];
        $scope.$apply(function(){
          return doc.thumbnailLoading = true;
        });
        return file.done(function(info){
          return $scope.$apply(function(){
            doc.thumbnail = info.cdnUrl + "";
            doc.thumbnailLoading = false;
            return $scope.page.update(doc);
          });
        });
      });
    },
    update: function(doc, doClose){
      doClose == null && (doClose = false);
      $scope.loading = true;
      return $http({
        url: "/d/page/" + doc.slug + "/",
        method: 'PUT',
        data: {
          title: doc.title,
          description: doc.description,
          thumbnail: doc.thumbnail,
          domain: doc.domain,
          path: doc.path,
          gacode: doc.gacode,
          tags: doc.tags,
          privacy: doc.privacy,
          publish: doc.publish
        }
      })['finally'](function(){
        return $scope.loading = false;
      }).then(function(){
        $scope.loading = false;
        if (doClose) {
          doc.toggled = false;
        }
        return ldNotify.send('success', 'saved.');
      })['catch'](function(){
        return alert("failed to save. try again later");
      });
    }
  };
}));
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}