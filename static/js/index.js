// Generated by LiveScript 1.3.0
var x$;
x$ = angular.module('webedit', ['ldBase', 'backend', 'ldColorPicker', 'ngAnimate']);
x$.config(['$animateProvider'].concat(function($animateProvider){
  return $animateProvider.classNameFilter(/ng-animate-on/);
}));
x$.factory('httpRequestInterceptor', ['global'].concat(function(global){
  return {
    request: function(config){
      config.headers['X-CSRF-Token'] = global.csrfToken;
      return config;
    }
  };
}));
x$.config(['$compileProvider', '$httpProvider'].concat(function($compileProvider, $httpProvider){
  $compileProvider.aHrefSanitizationWhitelist(/^\s*(blob:|http:\/\/localhost)|https?:\/\/dev.local\/|https?:\/\/makeweb.(io|local)\//);
  return $httpProvider.interceptors.push('httpRequestInterceptor');
}));
x$.controller('authPage', ['$scope'].concat(function($scope){
  if ($scope.user.data && $scope.user.data.key) {
    return window.location.href = $scope.neturl || '/';
  }
}));
x$.controller('site', ['$scope', '$http', '$interval', '$timeout', 'global', 'ldBase', 'ldNotify', 'initWrap', 'tappay'].concat(function($scope, $http, $interval, $timeout, global, ldBase, ldNotify, initWrap, tappay){
  initWrap = initWrap();
  import$($scope, ldBase);
  $scope.notifications = ldNotify.queue;
  $scope.staticMode = global['static'];
  $scope.$watch('user.data', function(n, o){
    if (!n || !n.key) {
      return;
    }
    $scope.track("uv/" + n.key, new Date().toISOString().substring(0, 10) + "", window.location.pathname);
    return gtag('config', 'GA_TRACKING_ID', {
      'user_id': n.key
    });
  }, true);
  $scope.user = {
    data: global.user
  };
  if (!$scope.user.data) {
    $http({
      url: '/u/login/guest',
      method: 'POST'
    }).then(function(d){
      return $scope.user.data = d.data;
    });
  }
  $scope.needlogin = function(path, relative, options){
    var isGuest;
    options == null && (options = {});
    isGuest = !($scope.user.data && $scope.user.data.key);
    if (isGuest && options.authInPage) {
      return window.location.href = "/u/login/?nexturl=" + path;
    }
    return (isGuest
      ? $scope.auth.prompt()
      : Promise.resolve()).then(function(){
      return window.location.href = ((relative ? window.location.pathname + "/" : '') + path).replace(/\/\//g, '/');
    })['catch'](function(){});
  };
  $scope.auth = initWrap({
    init: function(){
      var ret, that, this$ = this;
      ret = /nexturl=([^&#]+)/.exec(window.location.search);
      if (that = ret) {
        $scope.nexturl = that[1];
      }
      return $scope.$watch('auth.ctrl.toggled', function(){
        return this$.error = {};
      });
    },
    email: '',
    displayname: '',
    passwd: '',
    stick: false,
    subscribe: true,
    config: {
      dismissOnEnter: false,
      finish: function(){
        return $scope.auth.login();
      }
    },
    sync: function(){
      return $http({
        url: '/d/me/sync/',
        method: 'POST'
      }).then(function(arg$){
        var data;
        data = arg$.data;
        return import$($scope.user.data, data);
      });
    },
    verify: function(){
      this.error = {};
      return !/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.[a-z]{2,}|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i.exec(this.email)
        ? this.error.email = "this is not an email"
        : !this.isSignIn && (!this.displayname || this.displayname.length < 3)
          ? this.error.displayname = "it's too short"
          : !this.passwd || this.passwd.length < 4 ? this.error.passwd = "it's too weak!" : 0;
    },
    logout: function(){
      console.log('logout..');
      return $http({
        url: '/u/logout',
        method: 'GET'
      }).success(function(d){
        console.log('logouted.');
        $scope.user.data = null;
        return window.location.reload();
      }).error(function(d){
        return ldNotify.send('danger', 'Failed to Logout. ');
      });
    },
    login: function(opt){
      var config, this$ = this;
      opt == null && (opt = {});
      if (!(opt.force || this.isSignIn)) {
        return;
      }
      if (this.verify()) {
        return;
      }
      this.loading = true;
      config = {
        newsletter: this.subscribe
      };
      $http({
        url: this.isSignIn ? '/u/login' : '/u/signup',
        method: 'POST',
        data: $.param(import$(import$({
          email: this.email,
          passwd: this.passwd,
          displayname: this.displayname
        }, this.isSignIn
          ? {}
          : {
            config: config
          }), opt.force
          ? {
            passcode: 'private-beta'
          }
          : {})),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }
      })['finally'](function(){
        return this$.loading = false;
      }).then(function(d){
        $scope.user.data = d.data;
        gtag('config', 'GA_TRACKING_ID', {
          'user_id': d.key
        });
        if (this$.ctrl) {
          this$.ctrl.toggle(false);
        }
        if ($scope.nexturl) {
          return window.location.href = $scope.nexturl;
        } else if (opt.force || window.location.pathname === '/u/login') {
          return window.location.href = '/';
        }
      })['catch'](function(d){
        if (d.status === 403) {
          if (this$.isSignIn) {
            return this$.error.passwd = 'wrong password';
          } else {
            return this$.error.email = 'this email is used before.';
          }
        } else {
          return this$.error.email = 'system busy, try again later.';
        }
      });
      return this.passwd = "";
    }
  });
  $scope.nav = initWrap({
    node: null,
    init: function(){
      var node, this$ = this;
      node = document.querySelector('#nav-top nav');
      if (node && node.classList.contains('do-invert')) {
        return window.addEventListener('scroll', function(){
          var y;
          y = window.pageYOffset;
          if (y > 60) {
            return node.classList.add('invert');
          } else {
            return node.classList.remove('invert');
          }
        });
      }
    }
  });
  $scope.subscription = initWrap({
    init: function(){
      return this.update();
    },
    modal: {
      pay: {},
      plan: {},
      thanks: {},
      warn: {},
      method: {},
      invoice: {},
      methodCc: {
        payinfo: {
          invoice: {
            donate: true
          }
        },
        action: function(payinfo){
          $scope.subscription.loading = true;
          tappay.init();
          return tappay.getPrime(payinfo).then(function(primeinfo){
            var config, this$ = this;
            config = {
              url: '/d/subscribe/method',
              method: 'PUT',
              data: {
                gateway: 'tappay',
                detail: primeinfo
              }
            };
            return $http(config).then(function(){
              return alert("success!");
            }).then(function(){
              return window.location.reload();
            });
          });
        },
        config: {
          action: "Update"
        }
      },
      cc: {
        payinfo: {
          invoice: {
            donate: true
          }
        },
        action: function(payinfo){
          $scope.subscription.loading = true;
          return $scope.subscription.tappay({
            payinfo: payinfo
          }).then(function(){
            $scope.subscription.loading = false;
            return $scope.subscription.modal.pay.action('done');
          });
        },
        config: {
          action: "Subscribe with Credit Card"
        }
      }
    }
    /* Under Construction vvvv */,
    cancel: function(){
      var this$ = this;
      if ($scope.subscription.loading) {
        return;
      }
      $scope.subscription.loading = true;
      return $http({
        url: '/d/subscribe',
        method: 'DELETE'
      })['finally'](function(){
        return $timeout(function(){
          $scope.subscription.loading = false;
          $scope.subscription.modal.warn.ctrl.toggle(false);
          return window.location.reload();
        }, 1000);
      }).then(function(){
        return ldNotify.success("subscription cancelled");
      })['catch'](function(it){
        console.log(it);
        return ldNotify.danger("failed to cancel. try later?");
      });
    },
    tappay: function(arg$){
      var payinfo;
      payinfo = arg$.payinfo;
      $scope.subscription.loading = true;
      tappay.init();
      return tappay.getPrime(payinfo)['finally'](function(){
        return $scope.force$apply(function(){
          return $scope.subscription.loading = false;
        });
      }).then(function(primeinfo){
        return $scope.force$apply(function(){
          var config;
          config = {
            url: '/d/subscribe/',
            method: 'POST',
            data: {
              invoice: payinfo.invoice ? payinfo.invoice : void 8,
              gateway: 'tappay',
              detail: primeinfo,
              plan: $scope.subscription.getFullPlan()
            }
          };
          return $http(config);
        }).then(function(){
          return $scope.auth.sync();
        })['catch'](function(e){
          return $scope.force$apply(function(){
            if (e && e.status === 409) {
              ldNotify.send('warning', "you have subscribed before. try reloading...");
              return $timeout(function(){
                return window.location.reload();
              }, 1000);
            } else {
              return ldNotify.send('danger', "can't subscribe now. try later?");
            }
          });
        });
      });
    }
    /* Under Construction ^^^^ */,
    getFullPlan: function(){
      return this.period + "-" + this.plan + "-" + (this.modifier || 1);
    },
    plan: 'advanced',
    period: 'monthly',
    price: {
      monthly: {
        advanced: 12,
        pro: 24
      },
      yearly: {
        advanced: 9,
        pro: 18
      }
    },
    update: function(){
      var amount;
      amount = this.price[this.period || 'monthly'][this.plan || 'pro'] * (this.period === 'monthly' ? 1 : 12);
      return this.modal.cc.config.action = "Subscribe with $" + amount + " " + this.period + " billing";
    },
    setPlan: function(it){
      this.plan = it;
      return this.update();
    },
    setPeriod: function(it){
      this.period = it;
      return this.update();
    },
    toggle: {
      choose: function(plan){},
      warn: function(){
        $scope.subscription.modal.plan.ctrl.toggle(false);
        return $scope.subscription.modal.warn.ctrl.toggle(true);
      },
      plan: function(){
        return $scope.subscription.modal.plan.ctrl.toggle();
      },
      pay: function(plan){
        var promise, ref$, this$ = this;
        $scope.subscription.plan = plan;
        $scope.subscription.update();
        $scope.subscription.modal.plan.ctrl.toggle(false);
        promise = !((ref$ = $scope.user).data || (ref$.data = {})).key
          ? $scope.auth.prompt()
          : Promise.resolve();
        return promise.then(function(){
          var ref$;
          if (!((ref$ = $scope.user).data || (ref$.data = {})).key) {
            return Promise.reject();
          }
          return $scope.subscription.modal.pay.prompt();
        }).then(function(){
          return $scope.subscription.modal.thanks.ctrl.toggle();
        })['catch'](function(){});
      }
    }
  });
  initWrap.run();
  return console.log('site script initialized');
}));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}